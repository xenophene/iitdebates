<?php
  function getUserProfile($conn, $key, $value, $fb) {
    $query = "SELECT * FROM `users` WHERE `$key`='$value'";
    if ($result = $conn->query($query)) {
      if ($result->num_rows) $row = $result->fetch_assoc();
      else if ($key === 'uid') $row = array();
      else {
        // insert this user into the table. and return the tuple
        try {
          
          $profile = $fb->api('/me');
          $name = $profile['name'];
        } catch (FacebookApiException $e) {
          header('Location: index.php');
        }
        $query = "INSERT INTO `users` (`fbid`,`name`) VALUES ('$value','$name')";
        $conn->query($query);
        $query = "SELECT * FROM `users` WHERE `$key`='$value'";
        $result->close();
        $result = $conn->query($query);
        $row = $result->fetch_assoc();
      }
      $result->close();
      return $row;
    }
    return array();
  }
  
  function navigateInto($conn, $fb, $g) {
    $myfbid = $fb->getUser();
    if (isset($g['fbid'])) {
      $qfbid = $g['fbid'];
      $up = getUserProfile($conn, 'fbid', $qfbid, $fb);
      $up['me'] = $myfbid == $qfbid;
    } else if (isset($g['uid'])) {
      $quid = $g['uid'];
      $up = getUserProfile($conn, 'uid', $quid, $fb);
      $up['me'] = $up['fbid'] == $myfbid;
    } else if ($myfbid) {
      $up = getUserProfile($conn, 'fbid', $myfbid, $fb);
      try {
        $profile = $fb->api('/me');
      } catch (FacebookApiException $e) {
        header('Location: index.php');
      }
      $up['me'] = true;
    } else {
      header('Location: index.php');
    }
    $up['signed_in'] = $myfbid;
    return $up;
  }
  
  function getConnections($conn, $key1, $value, $key2) {
    $query = "SELECT `users`.`fbid` FROM `follower`, `users` ".
             "WHERE `follower`.`$key1`='$value' AND `follower`.`$key2`=`users`.`$key2`";
    if ($result = $conn->query($query)) {
      $ids = array();
      while ($row = $result->fetch_assoc()) {
        array_push($ids, $row['fbid']);
      }
      $result->close();
      return $ids;
    } else return array();
  }
  
  function getDebatesFollowed($conn, $fbid) {
    $query = "SELECT * FROM `debates` ".
             "WHERE `followers` LIKE '%$fbid%' ".
			       "ORDER BY `startdate` DESC";
    $result = $conn->query($query);
    return $result;
  }
  
  function updateActivity ($conn, $source, $type, $target, $sourcename, $targetname) {
    $query = "INSERT INTO `updates` (`source`,`type`,`target`,`sourcename`,`targetname`) ".
             "VALUES ('$source','$type','$target','$sourcename','$targetname')";
    $conn->query($query);
  }

  /* Gets all the activities from the mother updates table
     which are generated by people I follow. */
  function getActivities($conn) {
    /*Commented out because right now no fixed policy how to show updates
     * That's why selecting all the udpates from the table and showing.
     * whihch can be filtered and show only updates from $friends(which is
     * not properly defined now)*/
	
	  $query = "SELECT * FROM `updates` ORDER BY `updateid` DESC";
	  if ($result = $conn->query($query)) {
	    while ($row = $result->fetch_assoc()) {
        $type = $row['type'];
        $sourceid = $row['source'];
        $targetid = $row['target'];
        $sourcename = $row['sourcename'];
        $targetname =$row['targetname'];
        echo '<div class="update">';
        switch ($type) {
          case 0: // created debate 
            echo '<a href="home.php?uid='.$sourceid.'">'.$sourcename.'</a> started debate '.
                 '<a href="debate.php?debid='.$targetid.'">'.$targetname.'</a>';
            break;
          case 1: // challenged on debate
            echo '<a href="home.php?uid='.$sourceid.'">'.$sourcename.'</a> challenged '.
                 'to debate on <a href="home.php?uid='.$targetid.'">'.$targetname.'</a>';
            break;
          case 2: // followed User
            echo '<a href="home.php?uid='.$sourceid.'">'.$sourcename.'</a> is now following '.
                 '<a href="home.php?uid='.$targetid.'">'.$targetname.'</a>';
            break;
          case 3: // followed Debate
            echo '<a href="home.php?uid='.$sourceid.'">'.$sourcename.'</a> is now following '.
                 'the debate <a href="debate.php?debid='.$targetid.'">'.$targetname.'</a>';
            break;
        }
        echo '</div>';
      }
    }
  }

  /*Return the array of (debate,change) for the $user */
  function debateUpdates($conn, $user){
    $query = "SELECT `debates` FROM `users` ".
             "WHERE `fbid`='$user'";
    if ($result = $conn->query($query)) {
      while ($raw = $result->fetch_assoc()) {
        $Dtokens = explode(',', $raw['debates']);
        $didArray = array();
        $debateArray = array();
        for ($i = 0; $i < sizeof($Dtokens); $i++) {
          $temp = explode(':', $Dtokens[$i]);
          $didArray[] = $temp[0];
          $debateArray[$temp[0]] = intval($temp[1]);
        }
        if(sizeof($didArray) > 1) {
          // only if the user follow at least one debate.   
          $da = implode(',', $didArray);
          $query = "SELECT `debid`,`token` FROM `debates` ".
                   "WHERE `debid` IN (".$da.")";
          if ($result = $conn->query($query)) {
            while ($row = $result->fetch_assoc()) {
              $debateArray[$row['debid']] = intval($row['token']) - $debateArray[$row['debid']];
            }
          }
        }
        return $debateArray;
      }
    }
    return array();
  }
  
  function timeStamp ($session_time) {
    if($session_time <= 0) return - 1;
    $time_difference = time() - $session_time;
    $seconds = $time_difference;
    $minutes = round($time_difference / 60 );
    $hours = round($time_difference / 3600 ); 
    $days = round($time_difference / 86400 ); 
    $weeks = round($time_difference / 604800 ); 
    $months = round($time_difference / 2419200 ); 
    $years = round($time_difference / 29030400 ); 
    
    if ($seconds <= 60) return "$seconds seconds ago";
    else if ($minutes <= 60) {
      if ($minutes == 1) return "a minute ago"; 
      else return "$minutes minutes ago"; 
    } else if ($hours <= 24) {
      if($hours == 1) return "an hour ago";
      else return "$hours hours ago";
    } else if ($days <= 7) {
      if ($days == 1) return "a day ago";
      else return "$days days ago";
    } else if ($weeks <= 4) {
      if ($weeks == 1) return "a week ago";
      else return "$weeks weeks ago";
    } else if ($months <= 12) {
      if ($months == 1) return "a month ago";
      else return "$months months ago";
    } else {
      if ($years == 1) return "a year ago";
      else return "$years years ago";
    }
  }
  
  function getDebate($conn, $debid) {
    $query = "SELECT * FROM `debates` WHERE `debid`='$debid'";
    if ($result = $conn->query($query)) {
      if ($row = $result->fetch_assoc()) {
        $result->close();
        return $row;
      }
      header('Location: home.php');
    } else {
      header('Location: home.php');
    }
  }
  
  /* returns the current vote tally */
  function voteCount($upvotes, $downvotes) {
    if (!$upvotes) $upvote = 0;
    else $upvote = sizeof(explode(',', $upvotes));
    if (!$downvotes) $downvote = 0;
    else $downvote = sizeof(explode(',', $downvotes));
    return $upvote - $downvote;
  }
  
  function voteTally($upvotes, $downvotes) {
    $vote_tally = voteCount($upvotes, $downvotes);
    echo '<span title="View Vote Count" class="votes vote-store">'.
         '<span class="hide" id="upvoters">'.$upvotes.'</span>'.
         '<span class="hide" id="downvoters">'.$downvotes.'</span>'.
         '<span class="vote-count">'.($vote_tally).'</span>'.
         ' votes</span>';
  }
  function commentInfo($comment, $authorUid, $authorName) {
    echo '
      <div class="comment" name="'.$comment['comid'].'">
      <span class="author"><a href="home.php?fbid='.$authorUid.'"><img class="author-pic" src="https://graph.facebook.com/'
              .$comment['author'].'/picture?type=square"/>'.$authorName.'</a></span>
      <span class="comment-data">'.$comment['value'].'</span>
    ';
  }
  function deleteSupportVote($comment, $user) {
    $dontShow = false;
    //$date = timeStamp($comment['date']);
    //if ($date != -1)
    //  echo '<span class="comment-date" title="Post Time">'.($date).'</span>';
    
    if ($comment['author'] == $user and $user) {
      $dontShow = true;
      echo '
      <span class="delete-point votes" title="Delete this point">Delete</span>';
    }
    
    if (!$dontShow and $user) {
      echo '
      <span class="support-point votes" title="Support this point">Support</span>
      <span class="rebutt-point votes" title="Rebutt this point">Rebutt</span>';
    }
    
    foreach(explode(',', $comment['upvotes']) as $upvoter) {
      if ($user == $upvoter) $dontShow = true;
    }
    foreach(explode(',', $comment['downvotes']) as $downvoter) {
      if ($user == $downvoter) $dontShow = true;
    }
    $parent_id = $comment['parentid'];
    if ($parent_id > 0)
      echo '
        <span class="view-conversation votes"
        name="'.$parent_id.'">View Conversation</span>';
    if (!$dontShow and $user) {
      echo '
        <span class="upvote icon-arrow-up" title="Vote Up"></span>
        <span class="downvote icon-arrow-down" title="Vote Down"></span>';
    }
    
  }

  
  function commentsArray($conn, $debid) {
    $query = "SELECT * FROM `comments`, `users` WHERE debid='$debid' ".
             "AND `author`=`fbid` ORDER BY `comments`.`comid` DESC";
    if ($result = $conn->query($query)) {
      $comments = array();
      while ($row = $result->fetch_assoc()) {
        array_push($comments, $row);
      }
      $result->close();
      $votes = array();
      $comids = array();
      foreach ($comments as $key => $row) {
        $votes[$key] = voteCount($row['upvotes'], $row['downvotes']);
        $comids[$key] = $row['comid'];
      }
      array_multisort($votes, SORT_DESC, $comids, SORT_DESC, $comments);
      return $comments;
    }
    return array();
  }
  
  function getDebateCreator($conn, $userid) {
    $query = "SELECT * FROM `users` WHERE fbid='$userid'";
    if ($result = $conn->query($query)) {
      if ($row = $result->fetch_assoc()) {
        $result->close();
        return $row;
      }
      return array();
    }
    return array();
  }
  
  function updateToken($conn, $user, $debate, $token) {
    $query = "SELECT `debates` FROM `users` ".
             "WHERE `fbid`='$user'";
    if ($result = $conn->query($query)) {
      if ($row = $result->fetch_assoc()) {
        $Dtokens = explode(',', $row['debates']);
        $temp = 'no';
        for ($i = 0; $i < sizeof($Dtokens); $i++) {
          $t = explode(':', $Dtokens[$i]);
          if($t[0] == $debate and $t[1] != $token) {
            $Dtokens[$i] = $debate.':'.$token;
            $debates = implode(",",$Dtokens);
            $conn->query("UPDATE `users` SET `debates`='$debates' ".
                         "WHERE `fbid`='$user'");
          }
        }
      }
    }
  }
  
  function sanityCheck($text) {
    return mysql_real_escape_string(stripslashes($text));
  }
  


  

?>
